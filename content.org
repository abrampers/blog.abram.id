#+hugo_base_dir: .

* About
:PROPERTIES:
:EXPORT_HUGO_SECTION: /
:EXPORT_FILE_NAME: about
:END:

asdfadsf

* blog
:PROPERTIES:
:EXPORT_HUGO_SECTION: blog
:END:

** DONE WWDC19: Best Dub-Dub ever!                         :tech:conference:
CLOSED: [2019-06-24 Mon 17:55]
:PROPERTIES:
:EXPORT_FILE_NAME: wwdc19-best-dub-dub-ever
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2019-06-24 Mon 17:55]
:END:
#+toc: headlines 1 local

This year, I‚Äôm very lucky to be one of the WWDC19 Scholarship Winner from Indonesia to attend Apple‚Äôs event of the year. It‚Äôs obviously the best Dub-Dub ever since it‚Äôs my first time here! Dub-Dub 19 is an event packed with awesome things and I‚Äôm going to tell my story from the complete beginning. Here we go!

#+caption: HMIF ITB @ WWDC19 (Nicho, Abram, and Faza)
#+name: fig__group_image
https://cdn-images-1.medium.com/max/6048/1*mMUmHriJt0p8Y2Z46gBZGw.jpeg

*** What is WWDC?

#+begin_quote
The Apple Worldwide Developers Conference (WWDC, also known as Dub Dub) is a conference held annually by Apple Inc. in San Jose, California. Apple uses the event to showcase its new software and technologies for software developers. Attendees can participate in hands-on labs with Apple engineers and attend in-depth sessions covering a wide variety of topics. ‚Äî Wikipedia
#+end_quote

Enough from Wikipedia, for me, WWDC is an event where developers gather and obtain plenty of insights from Apple about their software. Even better, it‚Äôs an event where students (or recently graduated High School students) can apply and actually receive the scholarship to go to this event without spending a single penny.

*** WWDC Scholarship?

The **scholarship** term here means that Apple will get you the WWDC ticket for **free**. I repeat, **for free**.

To submit, we have to create a Swift Playground that can be experienced in 3 minutes in iPad‚Äôs Swift Playgrounds or Xcode‚Äôs Playground. After submission, application will be judged based on:

- Technical accomplishment
- Creativity of ideas
- Content of written response

**** Application

On a beautiful morning on Thursday, March 15, 2019 Apple announced that they had opened WWDC Scholarship Submission and that all submissions are meant to be submitted before Sunday, March 24, 2019 at 5.00 PM PDT. Wow, 7 days to work on the submission? **Challenge accepted**! I was quite surprised because they only gave us 7 days to work on the submission while previously the submission was up to two weeks long.

At first, I had an idea to create a real-time style transfer application in Swift Playground using UIKit, CoreML and probably camera for the real-time transfer, but after 5 days of working on it, the CoreML model decided to not cooperate. It always gave an error without any description. Frustrating.

This problem forced me to find something outstanding that works and was good enough to distinct me from other applicants. And some *Metal* struck my mind. ‚ÄúWhy don‚Äôt I try to use [[https://developer.apple.com/metal/][Metal]] just like how I used OpenGL for my Computer Graphics assignment?‚Äù And after 2 sleepless nights, I did just that.

I‚Äôve created a simple introduction to *Metal* using MetalKit named *Metalify*. Here's the [[https://github.com/abrampers/WWDC19-Submission][playground]] if you'd like to try it on your own.

#+caption: Scholarship email!
#+name: fig__email_image
https://cdn-images-1.medium.com/max/2544/1*O64rdYG16VbLC7NK_cnA9g.png

On another beautiful morning ‚Äî Monday, April 15, 2019 ‚Äî I received this email and my heart stopped for a second. Man! I got this. I was one of 350 students worldwide that got the scholarship. That was the best day of my college life yet ü§ñ.

As a scholarship winner, they told me that we would get free WWDC ticket, free lodging on the San Jose State University dorm, and free breakfast and lunch meal.

*** WWDC19

**** Swag

Fast forward to the Dub Dub week, we got to check in at the convention center and received some Dub Dub Swag for us to wear for the rest of the week. We got a reversible bomber jacket, a Scholarship Winner T-Shirt, and a few random pins including Indonesian Flag‚Äôs pin.

#+caption: Bomber jacket + small Tim Cook pin
#+name: fig__swag_image
https://cdn-images-1.medium.com/max/6048/1*7sfvKXgFy2aoxf9QTMHpKQ.jpeg

**** Scholarship kickoff

After checking in, all the scholarship winner were scheduled to attend scholarship kickoff where Esther Hare [@EEhare](https://twitter.com/eehare?lang=en) was there to give a little talk. She encouraged us to talk to as many people as we can, whether it‚Äôs fellow scholars, developers, or even Apple engineers. And the coolest thing here is that there were plenty of Apple engineers standing by for us to talk to. I was very excited since I never had any chance to get to meet, better yet, talk to the engineers that build Apple. Besides, there were plenty of food trucks and drinks all over the place..

#+name: fig__kickoff1_image
https://cdn-images-1.medium.com/max/12000/1*Vu7eITgS5sivMkDNtPuOPw.jpeg
#+caption: Beautiful weather @ Discovery Meadow with Indonesian scholarship winners
#+name: fig__kickoff2_image
https://cdn-images-1.medium.com/max/2250/1*ogZQRMEFWxEP8y9bQvQ2jw.jpeg

After the kickoff, a few of Indonesian scholars gather around and did a vlog about the Dub Dub. Here we go!

{{< youtube Ry0ezsPNt6I>}}

**** Keynote

The long awaited keynote was there and many people called this ‚Äòthe most packed WWDC Keynote ever‚Äô. This includes the announcement of the brand new Mac Pro, iPad OS, iOS 13, macOS Catalina and the SwiftUI & Combine which were the star for the rest of the week.

#+name: fig__keynote_image
#+attr_css: :width 75%
https://cdn-images-1.medium.com/max/3264/1*7IDRGBs7cyfjNYCb4eQ9Sg.jpeg

The most exciting part of the Keynote was the announcement of SwiftUI. There, Craig Federighi showed how [[https://developer.apple.com/documentation/swiftui][SwiftUI]], with its declarative traits + [[https://developer.apple.com/documentation/combine][Combine]] (Apple‚Äôs framework for Async programming) made multi-platform development seems so easy and fluid.

Project Catalyst had also brought huge possibilities since it enables developer to bring iPad Apps (built using UIKit) to run in Mac (typically built using AppKit). iPads can now be used as a *sidecar *to Mac. These two features will bring iPads closer to Macs and vice versa.

**** Scholarship Lounge

Scholars were given the privilege to chill and have a chit chat with fellow scholars throughout the week at the scholarship lounge. Here, we were given a wired 10MBps connection to try all the Betas they announced.

#+caption: Scholarship lounge: Our home
#+name: fig__lounge_image
https://cdn-images-1.medium.com/max/11228/1*HgGxRO1iodwpL36HH254nA.jpeg

**** Pro studio

#+caption: The recently announced Mac Pro
#+name: fig__prostudio_image
https://cdn-images-1.medium.com/max/8064/1*kmCk6hBke2b9lhluc6R04g.jpeg

All the Dub Dub attendee got the chance to visit the Pro Studio across the Convention Center to see the newly announced Mac Pro in action. In this building, they showcased a few workflows dome with the Mac Pro. Photo editing workflow, real-time 8K raw video rendering, creating music orchestra, and 3D Editing. Having seen all these things and as someone who didn‚Äôt really understand it, Mac Pro seemed like a real deal.

**** Sessions and Labs

For the rest of the week, there were plenty of sessions and labs conducted all over the Convention Center. Sessions are more like seminars conducted by Apple where they showcase best practices, reveal new features in more detail, and give a bit of demo. Labs are the place to go if you have a bug, question, or a feature request and give it right to the engineers that work on that particular feature. Awesome! We could actually ask the person who was in charge of the product. What a way to solve a bug.

#+name: fig__sessionlabs1_image
https://cdn-images-1.medium.com/max/8064/1*ZsvETrvysoT60qinnSB5yw.jpeg
#+name: fig__sessionlabs2_image
https://cdn-images-1.medium.com/max/8064/1*G0I23P7UxXG8_cbAa94LIA.jpeg
#+name: fig__sessionlabs3_image
https://cdn-images-1.medium.com/max/2000/1*lT-EgnL2S5TZziXPU5-j9w.jpeg

**** Games, Sporting Events, and WWDC Bash!

The sport activities was the High Intensity Interval Training by Aaptiv, WWDC 5K Run, and Yoga with Glo. They provided all the equipment for the training and let us have all the equipment. Note: They kinda gave us a $100 yoga mat LOL!

Throughout the week they conducted an AR game called SwiftStrike. It is a bowling game where the player had to hit down the opponent‚Äôs pin. At the end of the week, they conducted the SwiftStrike Championship and the funny thing is both the winner and the runner up are Indonesian üáÆüá©.

On the last night, Apple also invited the Weezers to the WWDC Bash (some kind of get-together concert) where we can chill out, enjoy the concert, and play games!

#+name: fig__hiit1_image
https://cdn-images-1.medium.com/max/2250/1*AiXv107iWKkFjHNFwlXAFQ.jpeg
#+name: fig__hiit2_image
https://cdn-images-1.medium.com/max/2250/1*a3GP1NeLhRs4ZSV0wcYW9Q.jpeg
#+caption: HIIT Morning Workout, SwiftStrike, and WWDC19 Bash!
#+name: fig__hiit3_image
https://cdn-images-1.medium.com/max/2000/1*-YJKq5HbYbGyURfclQbyBw.jpeg

*** Lesson learned

Meeting all those people in Dub Dub opened my mind about how I look at myself. Never think that we‚Äôre the smartest person in the room. I actually met the person that made the La Liga iOS App and all of these things pushed me to keep striving for greatness.

Second thing, as a developer we tend to focus on highly technical things. Here, I realized that the ability to communicate with other people is essential for a developer‚Äôs success. Trying to share and communicate what we have in mind will help us a lot in our everyday life.

The third and final thing is to never, ever underestimate a person, stay humble and respect everyone.

*** Final thoughts

After all, WWDC is a networking opportunity for many people. We can always see the sessions online, but the chance to speak with random people when queueing for the line is special. We never know what a short conversation with some random guy at Dub Dub can bring us.

#+begin_quote
*Pro tip*: Bring your business card and talk to as many people as you can @ WWDC
#+end_quote

#+name: fig__friends1_image
https://cdn-images-1.medium.com/max/8064/1*d2QcqQotYDs202ALyQAdqg.jpeg
#+name: fig__friends2_image
https://cdn-images-1.medium.com/max/8064/1*vX4kZveZpYSZ4W9krHvhFw.jpeg
#+name: fig__friends3_image
https://cdn-images-1.medium.com/max/8064/1*jr4w2Xikvy-La1rBAEWq2g.jpeg
#+caption: Don't be shy and make new friends @ WWDC
#+name: fig__friends4_image
https://cdn-images-1.medium.com/max/8064/1*Jo4PpChs5Mev8yYoKoAQng.jpeg

This article can‚Äôt 100% express how I felt before and after WWDC, but I hope this will inspire many people to find their way to WWDC.

Hope to see more of Indonesians (especially **HMIF ITB**) @ Dub Dub 2020!

**** Links

- [[https://github.com/abrampers/WWDC19-Submission][My WWDC19 Submission]]
- [[https://www.youtube.com/watch?v=Ry0ezsPNt6I][YouTube video]]

**** References

- Pictures by [[https://twitter.com/SwapnanilDhol][@SwapnanilDhol]] and Apple
** DONE Intercepting HTTP/2 Packets without Wireshark
CLOSED: [2020-03-12 Thu 23:19]
:PROPERTIES:
:EXPORT_FILE_NAME: intercepting-http-2-packets-without-wireshark
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-03-12 Thu 23:19]
:END:
#+toc: headlines 1 local

*** HTTP/2, what is it?

I never knew HTTP/2 until I bumped into gRPC, which uses HTTP/2 as its Layer 7 protocol. At first, it seems that HTTP/2 is just like another update of the commonly used HTTP/1.1. Yet HTTP/2 is a new HTTP protocol designed to deal with the limitations of HTTP/1.1.

For a bit of context, HTTP/1.1 had plenty of latency and inefficiency issues that made the performance of common internet webpage (that relies heavily on HTTP protocols) extremely hard to optimize. The first time we open a web page, it usually requires requesting a dozen resources from stylesheets, images, JavaScript codes, and other API calls. HTTP/1.1 does this by creating an equal number of TCP connection to get the resources in a parallel fashion. This means when the server is processing and preparing the response, the TCP connection is doing nothing but waiting for the server to give the response. This is very inefficient considering every single TCP connection made is doing nothing for some time. Plus there is always a cost when opening a TCP connection and closing it. So it is very inefficient to use one TCP connection per HTTP request.

HTTP/2 was made to solve some of the problems by enabling TCP to be multiplexed for multiple HTTP requests. So with HTTP/2, we will be opening less number of TCP connections compared to HTTP/1.1. HTTP/2 also enables a TCP connection to be reused for multiple request, no more one TCP connection per HTTP request. These two features will improve the utilization of the TCP connection.

Another main difference of HTTP/2 and HTTP/1.1 is that HTTP/2 is binary, while HTTP/1.1 is textual. On one hand, this gives us the benefit of speed since computers are good with binaries. Yet on the other hand, it is more difficult to debug since humans are not very good with binaries. To add on, what's more interesting is even the HTTP/2 headers are compressed for performance reasons. These two features increase the complexity to intercept and process HTTP/2 packets from the previous HTTP/1.1 where we could just read the whole payload text.

Aside from features mentioned above, there are plenty of other features of HTTP/2 you can read in the [[https://httpwg.org/specs/rfc7540.html][RFC 7540]] document.

*** Intercepting the actual packets

At this time of writing, I haven't found any way to intercept and decode HTTP/2 packet other than [[https://www.wireshark.org][Wireshark]]. Wireshark is obviously a great tool for network analysis, but at other times, we want to intercept and process the packet built in right onto our applications. In this use case, Wireshark is not a suitable option, so we need to integrate HTTP/2 into existing packet interception library.

To intercept the packets, I will be using Go with Google's [[https://github.com/google/gopacket][gopacket]]. This stack is my go to choice because Go have the first class support for HTTP and HTTP2 and Gopacket itself is fairly extensible.

From here onwards we'll use the term "frame" to represent the unit of transfer of an HTTP/2 traffic.

**** Implementing the layers

Since Gopacket doesn't support HTTP/2 as its application layer, we need to tell Gopacket about the structure of HTTP/2 frame using the code below.

#+begin_src go

// Create a layer type and give it a name and a decoder to use.
var LayerTypeHTTP2 = gopacket.RegisterLayerType(12345, gopacket.LayerTypeMetadata{Name: "HTTP2", Decoder: gopacket.DecodeFunc(decodeHTTP2)})

type HTTP2 struct {
    layers.BaseLayer

    frames []http2.Frame
}

// Implement layer's metadata
func (h HTTP2) LayerType() gopacket.LayerType      { return LayerTypeHTTP2 }
func (h *HTTP2) Payload() []byte                   { return nil }
func (h *HTTP2) CanDecode() gopacket.LayerClass    { return LayerTypeHTTP2 }
func (h *HTTP2) NextLayerType() gopacket.LayerType { return gopacket.LayerTypeZero }

// Implement the decoder function to be used
func decodeHTTP2(data []byte, p gopacket.PacketBuilder) error {
    h := &HTTP2{}
    err := h.DecodeFromBytes(data, p)
    if err != nil {
        return err
    }
    p.AddLayer(h)
    p.SetApplicationLayer(h)
    return nil
}

func (h *HTTP2) Frames() []http2.Frame {
    return h.frames
}

func (h *HTTP2) DecodeFromBytes(data []byte, df gopacket.DecodeFeedback) error {
    var frames []http2.Frame
    frameHeaderLength := uint32(9)
    payloadLength := len(data)

    payloadIdx := 0
    for payloadIdx < payloadLength {
        if payloadIdx+int(frameHeaderLength) > payloadLength {
            return fmt.Errorf("Payload length couldn't contain Frame Headers")
        }

        framePayloadLength := (uint32(data[payloadIdx+0])<<16 | uint32(data[payloadIdx+1])<<8 | uint32(data[payloadIdx+2]))
        frameLength := int(frameHeaderLength + framePayloadLength)

        rBit := data[payloadIdx+5] >> 7

        if rBit != 0 {
            return fmt.Errorf("R bit is not unset")
        }

        if payloadIdx+frameLength > payloadLength {
            return fmt.Errorf("Payload length couldn't contain Payload with the length mentioned in Frame Header")
        }

        var framerOutput bytes.Buffer
        r := bytes.NewReader(data[payloadIdx : payloadIdx+frameLength])
        framer := http2.NewFramer(&framerOutput, r)

        frame, err := framer.ReadFrame()
        if err != nil {
            return err
        }
        frames = append(frames, frame)

        payloadIdx += int(frameLength)
    }

    if payloadIdx != payloadLength {
        return fmt.Errorf("Payload length is not equal with the Frame length mentioned in Frame Header")
    }

    h.BaseLayer = layers.BaseLayer{Contents: data[:len(data)]}
    h.frames = frames
    return nil
}

#+end_src

After multiple trials, I found out that =http2.Framer= would get stuck if we give a data that's not a valid HTTP/2 frame format (as depicted below). This means we need to find a way to classify whether the bytes of data is a valid frame or not. [[https://httpwg.org/specs/rfc7540.html][RFC 7540]] document doesn't mention any way to classify a HTTP/2 frame, so I came up with a currently working solution by checking:

- Is the frame length specified in the frame header the same with the actual payload length?
- Is the R bit is unset?

#+begin_src

+-----------------------------------------------+
|                 Length (24)                   |
+---------------+---------------+---------------+
|   Type (8)    |   Flags (8)   |
+-+-------------+---------------+-------------------------------+
|R|                 Stream Identifier (31)                      |
+=+=============================================================+
|                   Frame Payload (0...)                      ...
+---------------------------------------------------------------+

#+end_src


After we check the validity of the frame, we want to utilize Go's =net/http2= package to decode the frame for us. We do that by creating a new =framer= and pass the data to the =framer=. Next we call the =ReadFrame= function to get the actual HTTP/2 frame.

**** Intercepting the frames

Next, we're going to capture the packet and decode the HTTP/2 frames.

#+begin_src go

package main

import (
    "bytes"
    "fmt"
    "log"
    "time"

    "github.com/google/gopacket"
    "github.com/google/gopacket/layers"
    "github.com/google/gopacket/pcap"

    "golang.org/x/net/http2"
)

var (
    device       string        = "lo0"
    snapshot_len int32         = 1024
    promiscuous  bool          = false
    timeout      time.Duration = 900 * time.Millisecond
    filter       string        = "tcp"
)

func main() {
    // Open device: We could also use other options (i.e. Open a .pcap file)
    handle, err := pcap.OpenLive(device, snapshot_len, promiscuous, timeout)
    if err != nil {
        log.Fatal(err)
    }
    log.Printf("Successfully opened live sniffing on %s\n", device)
    defer handle.Close()

    var h2c HTTP2

    // Create a parser to decode our HTTP/2 frame
    parser := gopacket.NewDecodingLayerParser(LayerTypeHTTP2, &h2c)

    // Use the handle as a packet source to process all packets
    source := gopacket.NewPacketSource(handle, handle.LinkType())
    decoded := []gopacket.LayerType{}

    // Process every packet
    for packet := range source.Packets() {
        ipLayer := packet.NetworkLayer()
        if ipLayer == nil {
            log.Println("No IP")
            continue
        }

        // Cast the layer to either IPv4 or IPv6
        ipv4, ipv4Ok := ipLayer.(*layers.IPv4)
        ipv6, ipv6Ok := ipLayer.(*layers.IPv6)
        if !ipv4Ok && !ipv6Ok {
            log.Println("Failed to cast packet to IPv4 or IPv6")
            continue
        }

        tcpLayer := packet.Layer(layers.LayerTypeTCP)
        if tcpLayer == nil {
            log.Println("Not a TCP Packet")
            continue
        }

        tcp, ok := tcpLayer.(*layers.TCP)
        if !ok {
            log.Println("Failed to cast packet to TCP")
            continue
        }

        appLayer := packet.ApplicationLayer()
        if appLayer == nil {
            log.Println("No ApplicationLayer payload")
            continue
        }

        packetData := appLayer.Payload()
        if err := parser.DecodeLayers(packetData, &decoded); err != nil {
            fmt.Printf("Could not decode layers: %v\n", err)
            continue
        }

        fmt.Println("*****************************************************")
        if ipv4Ok {
            fmt.Println("IPv4 SrcIP:        ", ipv4.SrcIP)
            fmt.Println("IPv4 DstIP:        ", ipv4.DstIP)
        } else if ipv6Ok {
            fmt.Println("IPv6 SrcIP:        ", ipv6.SrcIP)
            fmt.Println("IPv6 DstIP:        ", ipv6.DstIP)
        }
        fmt.Println("TCP srcPort:       ", tcp.SrcPort)
        fmt.Println("TCP dstPort:       ", tcp.DstPort)
        fmt.Println("HTTP/2:            ", h2c.frame)
        fmt.Println("*****************************************************")
    }
}

#+end_src

*** Conclusion

Using Go's native HTTP support and Gopacket, we could build a packet interception program for HTTP/2. For further HTTP/2 header processing, we could also use =net/http2/hpack= package to do the HPACK decoding and encoding.
** DONE Formula 1 Cars is a Fascinating Engineering Problem / Masterpiece
CLOSED: [2020-10-08 Thu 23:19]
:PROPERTIES:
:EXPORT_FILE_NAME: formula-1-cars-is-a-fascinating-engineering-problem-masterpiece
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-10-08 Thu 23:19]
:END:
#+toc: headlines 1 local

#+caption: Sebastian Vettel on his Ferrari (Photo by [[https://unsplash.com/@seffen99?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText][Sven Brandsma]] on [[https://unsplash.com/s/photos/formula-1?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText][Unsplash]])
[[/images/f1-vettel-ferrari.jpg]]

#+begin_quote
How incredible all the cars on the grid are. Every one of those machines are extreme in a way that it is hard to comprehend unless you work inside a team or unless you physically stand in the fast corner and be really close to it and watching it as it goes to a corner. Because only then you can really, really appreciate how utterly amazing the performace is.‚Ää

-‚ÄäJames Allison, Chief Technical Director Mercedes-AMG F1 Team [1]
#+end_quote

Formula 1 cars is a fascinating engineering problem because in designing it, the engineers have to think through hundreds of parts from design, testing, race day, to updates phase and make sure that each part can work nicely along the others to achieve the main goal to win championships.

Before going into details, let's set the context.

*** Context

Formula 1 cars are the cars used to compete in Formula 1‚Ää-‚Ääthe highest class of international single-seater auto racing. [2]

**** The Goal

The ultimate goal in participating in Formula 1 competition is to win the championship. In order to win the championship, the team / driver have to win races. And to win a race, the team / driver have to be the quickest on the grid.

**** The Situation

But however, there are some constraints while producing the quickest car on the grid.

***** Regulation

Just like other competitions, there are rules to be followed. But in F1, the rules are more complex because it is covering the whole workflow from designing each part, what each part is allowed to do, what are the interfaces the drivers are allowed to use, how to conduct testing, and [[https://www.fia.com/regulation/category/110][many more]].

***** Resources

As a business, F1 teams are also constrained by money generated by sponsorship deals, manpower, and time (where testing time is also regulated).

***** Driver's Preferences

At the race day, the car will be driven by the team‚Äôs driver. It is critical to have a car that the driver can use effectively and efficiently.

***** Track Variability

Throughout the season, races will be conducted on different tracks with its own characteristics. Some of the variables here are corner speed, banking degrees, and DRS zones.

***** Weather Variability

Races will be conducted on both dry and wet conditions. This requires the car to be able to perform well in hot and cold conditions & grippy and slippery conditions.

*** Why?

As a software engineer, I like to use distributed systems as an analogy to a F1 car. In distributed systems, we will have multiple small components that communicate to each other. The components will have their own responsibility. Finally when all the components are woven in together nicely, the distributed system is able to solve particular problem or to reach a certain goal.

F1 cars are the same. It also consists of multiple components such as front wing, rear wing, front suspensions, rear suspensions, wheels, barge boards, power unit, gearbox, and more. In order to be the quickest car on the grid, all of these components and the subcomponents inside it should work nicely when assembled to a unit of F1 car. Meaning that when everything is assembled, every component should be adding or multiplying positive value not negative value.

But sometimes not all design will be possible. Tracks will be different. The cars have to be flexible enough to be set up to adapt to the different situations it will face. Tradeoffs (in both design and setup) must be made to optimize all the resource a team had to produce the quickest car possible on every race.

One more analogy between distributed systems and F1 cars is if we‚Äôre to build a distributed systems, the knowledge of all the principles of distributed systems and computer science are critical to make correct decision. F1 cars is the same. Having a deep knowledge physics knowledge on how the car behaves is the thing that enables the team to design a quick car and improve it further.

In the next section, I‚Äôll explain in detail of what each major components do and how they interact with each other.

*** Aspects of a Formula 1 Car

**** Power Unit

Currently, F1 cars use hybrid power unit with 4 stroke internal combustion engine. The power unit will generate power by suck, squeeze, bang, blow phases on the fuel. The fuel will flow from the tank to the engine cylinders in a regulated rate. So no team can cheat by having more fuel per amount of time. The power generated will turn the axle who‚Äôs connected to the gearbox. The gearbox‚Äôs purpose here is to make sure the engine is operating in the optimal RPM to produce the maximum amount of power.

#+caption: Power generation on particular point in the lap [3]
[[/images/f1-austria-neutral-lap.png]]

In the image above, we can see where the power is coming from at any point in the track. This is one of the neutral cases. It will have a different setup for more aggressive or conservative mode.

The power unit is mainly tightly coupled the chassis. First case is given all things equal. If the power unit is able to operate in a higher temperature, the car can have smaller radiator. Smaller radiator means slimmer chassis, and slimmer chassis means less drag. Second case is given all things equal, with more power, the drag force will be higher. As a result of that, the downforce will be higher.

**** Chassis x Aerodynamics

Chassis is the largest part of a F1 car. Chassis determines whether the car can behave as expected or not. For example, with the right combination of drag x downforce x power, the driver can handle the car better and faster through a corner. When something is missing on one of the three sections, the car would be undrivable. Meaning it is not fast, hard to handle, and not behaving as expected. Obviously this can lead to oblivion (position loss, points loss, crashes).

Another important part of the chassis is how does it interact with the wheels. Does the chassis distort the wheel shape? If it does, what shape will the wheels have? Why is this important? If the chassis is not interacting with the wheels positively, the tyre wear will be bad. Meaning the life of a set of tyre will be lower. This will result to more pit stops and having a worse handling on bad tyres.

One interesting point I‚Äôd like to point out is the front wing and the barge boards. Front wing is the first place the air make contact with the car. Front wing will redirect the airflow to the wheel. After the air passes the wheel, the bargeboards are there to receive the air and redirect it to the floor to generate more downforce.

You‚Äôre hearing a lot of downforce in this section. Downforce is very important to a F1 car because by having higher downforce, F1 car will be able to go to a corner in a higher speed. Imagine there are 18 corners in a track. By having a higher turning speed, the car will have much quicker lap time.

**** Suspensions [4]

Suspensions are the component that will be setup differently for each track and driver. Why does this happen? Suspension setup is modifying the grip differential between front and rear tyres. By having more front grip, the car will be much easier to oversteer (rear part sliding) whereas by having more rear grip, the car is prone to understeer (hard to turn). Different drivers have different preferences on these part.

Suspensions can vary from hard to soft. Softer suspensions can absorb bumps more effectively, but at the cost of higher tyre wear. Harder suspension absorb less bump, meaning the whole car can be shaking when hitting a bump, but this has lower tyre wear than softer suspensions.

Suspension also affect the ride height or the distance between the road to the floor of the car. Higher ride height will cause higher drag and more downforce whereas lower ride height cause lower drag and less downforce.

Suspension also affect camber and toe. Camber is how the tyre contact the road vertically and toe is how the tyre contact the road horizontally. Adjusting camber can affect tyre wear. So if you got unoptimal camber, tyre wear will be bad. Toe in the other hand effect the turning response of a car. Meaning open toe will have better turning behavior, but more drag in the straight line since the tyre won‚Äôt be perfectly perpendicular with the direction.

**** Wheels

All F1 cars currently have the same set of wheels to choose from (Soft, Medium, Hard, Intermediate, Wet). The challenge here is to make sure that the car can extract all the tyre life given by the tyre. If a car can only work with one type of tyre, then the team is tightly coupled with a race strategy and results an inflexible team.

*** Conclusion

F1 cars are extremely fascinating and gives the engineer a different set of problem each race, each season. They have to design a thousands of good part, integrate the part to the car, and make sure it has positive impact to the championship. They have to iterate update process after race and make sure that the car is better for the next race. Truly, F1 cars are an engineering masterpiece.

*** References

1. [[https://www.youtube.com/watch?v=URJcgCWxl9M][James Allison: r/Formula1 Ask Me Anything]]
2. [[https://en.wikipedia.org/wiki/Formula_One][F1 - Wikipedia]]
3. [[https://www.youtube.com/watch?v=RwwUOYTbyfs][How Do F1 Power Units ACTUALLY Work? | F1 Engines Explained!]]
4. [[https://www.youtube.com/watch?v=JbqEtApATZg][How Do Setups Work On An F1 Car?]]
5. [[https://www.youtube.com/watch?v=28sptR3UY90][The 2020 Mercedes F1 Car Explained!]]
* Footnotes
* COMMENT Local Variables                          :ARCHIVE:

# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
